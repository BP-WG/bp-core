[workspace]
members = [
    "consensus",
    "seals",
    "."
]
default-members = [
    "consensus",
    "seals",
    "."
]

[workspace.package]
version = "0.11.1-alpha.2+unreviewed"
authors = ["Dr Maxim Orlovsky <orlovsky@lnp-bp.org>"]
homepage = "https://github.com/BP-WG"
repository = "https://github.com/BP-WG/bp-core"
rust-version = "1.81.0"
edition = "2021"
license = "Apache-2.0"

[workspace.dependencies]
amplify = "~4.8.0"
strict_encoding = "~2.8.2"
strict_types = "~2.8.3"
commit_verify = "0.11.1-alpha.2"
single_use_seals = "0.11.1-alpha.2"
bp-consensus = { version = "0.11.1-alpha.2", path = "./consensus" }
bp-dbc = { version = "0.11.1-alpha.2", path = "./dbc" }
bp-seals = { version = "0.11.1-alpha.2", path = "./seals" }
secp256k1 = { version = "0.30.0", features = ["global-context", "rand"] }
serde_crate = { package = "serde", version = "1", features = ["derive"] }

[package]
name = "bp-core"
version = { workspace = true }
description = "Bitcoin protocol core library (BP Core Lib)"
keywords = ["lnp-bp", "smart-contracts", "bitcoin", "blockchain"]
categories = ["cryptography"]
authors = { workspace = true }
repository = { workspace = true }
homepage = { workspace = true }
edition = { workspace = true }
license = { workspace = true }
rust-version = { workspace = true }
readme = "README.md"
exclude = [".github", "primitives", "dbc", "seals"]

[lib]
name = "bp"
path = "src/lib.rs"

[[bin]]
name = "bpcore-stl"
required-features = ["stl"]

[dependencies]
amplify = { workspace = true }
strict_encoding = { workspace = true }
strict_types = { workspace = true, optional = true }
commit_verify = { workspace = true }
bp-consensus = { workspace = true }
bp-seals = { workspace = true }
serde_crate = { workspace = true, optional = true }

[features]
default = []
all = ["chrono", "serde", "stl"]
chrono = ["bp-consensus/chrono"]
serde = [
    "serde_crate",
    "bp-consensus/serde",
    "bp-seals/serde",
]
stl = ["strict_types", "strict_types/armor", "bp-consensus/stl", "commit_verify/stl"]

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2"
rand = { version = "0.9.1", optional = true }
getrandom = { version = "0.3", features = ["wasm_js"] }
getrandom2 = { package = "getrandom", version = "0.2", features = ["js"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3"

[package.metadata.docs.rs]
features = ["all"]
